// 2022-05-01
// [타입가드]
// 2개 이상의 타입을 갖게 되는 경우가 있을 때
// 코드 상에서 a라는 타입이 들어왔을 때 작동될 수 없는 코드에 대해 경고를 해주거나
// 혹은 원천적으로 막을 수 있는 코드 테크닉 또는 코딩 방식

// 상이한 타입을 입력받을 수 있는 상태로 만들어 놓으면
// 런타임은 타입스크립트의 영역이 아니기 때문에 런타임에는 어떤 타임이 올지 알 수 없음
// => 자바스크립트의 영역
// => 자바스크립트에서는 그 변수에 어떤 타입이 들어오는지 타입 검사를 수행함

function doubleTypeFunction(a: number | string){
    // 런타임에 어떤 타입이 올지 모르기 때문에
    // typeof를 이용해 어떤 타입인지 확인하고 있음
    if(typeof a === 'string'){
        return a.replace('x', 'X');
    }

    // string이 아닌 경우
    // a가 string이 아닌 경우 replace 메소드가 존재하지 않을 수 있기 때문에
    // 타입스크립트가 체크해서 알려줌
    // => 타입스크립트가 단순히 타입만 보는 것이 아니라 코드 흐름까지 인지하여 경고해줌
    // => 컴파일 타임의 타입가드를 제공하고 있음을 알 수 있음
    return a.replace('Y', 'y');
}

doubleTypeFunction(10);


function foo(a?: number | null){
    // 인자값이 없으면 그냥 리턴함
    // => 타입가드
    if( a === null) return;

    console.log('display before');
    // ? => valueOf() 메소드가 없으면 undefined로 만들라는 기능임
    // 프로그램이 죽지는 않는다.
    // 그렇다고 좋은것인가? 라고 한다면 그렇진 않는것 같다.
    // 애플리케이션이 종료가 되어야 하는 상황에서는 종료가 되어야 하는게 맞다.
    // 아래의 코드가 실제로 동작하면 안되는데 동작되는 경우가 발생할 수 있다.
    // => 그럴 땐 종료되어야 하는게 맞다. 불필요한 오작동을 막을 수 있는 길이다.
    // => 그러므로 적절한 기능은 아니다.
    console.log(a?.valueOf());
    console.log('display after');
}

foo();

// 인터페이스를 이용하여 타입 유형을 검사할 수 있는 패턴
interface Foo{
    foo: string;
    common: string;
}

// isFoo
// => Foo 인스턴스와 같은 유형의 데이터로 객체가 만들어져 있는지 확인하는 함수
// 인자로 객체를 받는게 그것은 어떤 객체도 받을 수 있다.
// 리턴은 그 객체 자체를 리턴하는데 is Foo (타입스크립트만의 특별한 타입 가드 문법)
// Foo 인터페이스와 aguments가 같으냐?
// is => 타입스크립트의 타입 가드용 체크 함수를 기술하는 방법
function isFoo(arg: any): arg is Foo{
    // arg의 foo속성이 있는지 없는지 확인

    return arg.foo !== undefined;
}

console.log(isFoo({foo: 'ok', common: 'wow'}));

// 특정 인터페이스용 객체를 검사하는 코드를 런타임에 심어두면 훨씬 더 간략하게 코드를 작성할 수 있다.
// (if문을 가지고 반복되는 코드를 작성할 필요가 없으므로)

// 제약
// 속성을 추가했을 때 타입 가드에서는 확인할 수 없음
// 하지만 이렇게 코드를 작성할 이유는 별로 없음
console.log(isFoo({foo: 'ok', common: 'wow', active: false}));

// 타입 검사용 함수(도움함수)
// 꽤 유용함
// 코드를 훨씬 간략하게 유지보수 할 수 있다.