// 2022-05-02
// [JSON]

// 데이터를 주고받을 상황이 있을 때 
// 자바스크립트나 타입스크립트에서는 객체를 주고받는게 가장 효과적
// 객체는 자바스크립트의 실행하는 동안에
// 메모리 상에만 존재하는 구조 => 데이터로써 주고받기가 어려움

// 데이터로써 주고받는다
// => 서버로부터 데이터를 받야야 된다거나
// => 웹앱에서 서버로 데이터를 보내야한다거나
// => 데이터를 브라우저 상에 어떤 저장 장치에 저장을 해야한다거나
//      (로컬 스토리지, 세션 스토리지, DB, ...)
// => 객체 그 자체를 저장할 수 없기 때문에 방법이 필요함
// => "JSON"
//      : 데이터 교환을 위한 용도로 개발된 포맷
//      자바스크립트 객체와 매우 유사하게 생겼음

// JSON은 기본적으로 문자열이다.
// 객체와 굉장히 비슷하게 생겼다.
// ? => 자바스크립트 객체를 데이터로 변환하기 위한 용도로 만들었기 때문
const jsonString = `
    {
        "name": '박가은',
        "age": 20,
        "bloodType": "AB"
    }
`;
// key의 이름을 반드시 더블 쿼트("")로 감싸줘야 한다.
// value도 문자열인 경우 더블 쿼트로 감싸줘야 한다.
// 맨마지막 속성의 콤마는 지워줘야 한다.
// (마치 자바스크립트의 올드 버전 객체의 표현법 같음)

// 데이터 타입의 종류가 제한적이다.
// 문자열, 숫자, 배열, 객체, boolean

// JSON 객체를 실제 자바스크립트에서 사용하기 위해서는
// 객체로 변환하는 것이 필요함
// => JSON 내장 객체를 지원함
const myJson = JSON.parse(jsonString);
console.log(myJson);

// 데이터를 전송하기 위해 JSON으로 만들고 싶을 땐?
console.log(JSON.stringify(myJson));

// *주의
// 1. 자바스크립트의 객체는 함수를 지원하는데 JSON은 데이터이기 때문에 함수를 지원하지 않는다.
// 2. JSON 문자열에 문제가 있다면?
//      JSON을 객체로 변환하는 순간 실패, 프로그램 종료된다.
//      => 오류에 대한 메시지를 보내야 한다.
//    JSON.parse를 할 때 발생하는 오류는 예외로 발생한다.
//      => try-catch 구문으로 잡을 수 있음

const jsonString2 = `
    {
        "name": '박가은',
        "age": '20',
        "bloodType": "AB"
    }
`;

try{
    const myJson2 = JSON.parse(jsonString2);
    console.log(myJson2);
    console.log(JSON.stringify(myJson2));

}catch(e){
    console.log('다시한번 시도해 주세요.');
}

// JSON.parse를 할 때 혹시 모를 오류 상황을 위해
// 항상 try-catch 예외 구문으로 감싸서 오류 상황에 대비 해야 한다.



