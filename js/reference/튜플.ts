// 2022-04-26

// [튜플]
// 배열인데 원소의 개수를 제한하고
// 각각의 원소 타입을 규정한 데이터 타입

// 배열과 매우 유사하지만 굉장히 다른 타입
// 자바스크립트가 지원하지 않는 타입 유형
// 타입스크립트만 제공하는 특별한 데이터 유형

// 자바스크립트가 제공하는 배열을 확장한 기능
// 배열이 가지고 있는 기능을 모두 가지고 있음
// 타이핑을 하면서 배열이 가지지 못하는 제약 사항 하나를 걸 수 있음

// 원소 수 즉, 크기를 제약할 수 있다.
// [숫자, 문자열, 문자열]로 이루어진 배열만 넣을 수 있음
const address: [number, string, string] = [14023, '서울시', '송파구'];

// 왜 사용하는가?
// 보통 어떤 위치에 어떤 제이터 유형이 들어가 있는 경우가 흔하다.
// 하지만 배열은 이름이 없고 위치 값만 있기 때문에 

// 기존 구조 분해 연산자를 이용해 빼올 수 있음
let [zipcode, address1] = address;
// 첫 번째 유형이 number이므로 문자열을 넣었을 때는 잘못되었다고 알려주는 장점 발현
// => 타이핑 영역을 훨씬 더 확장할 수 있음
zipcode = '12345';

// 
type BookInfo = [string, string, number];

// 바깥쪽 배열은 일반 배열이고
// 안쪽 배열은 튜플
const BookData: BookInfo[] = [
    ['헨리 8세', '셰익스피어', 1884],
    ['헨리 8세', '셰익스피어', 1884]
];

// 데이터를 넣으려고 할 때 튜플이 정해놓은 데이터 유형과 불일치하면
// 타입을 확인 후 알려준다.
// => 타입 체크를 할 수 있는 표현을 할 수 있다는 큰 장점
BookData.push(['a', 'b', 23]);

function getArrayOne(): any[]{
    return [14023, '서울시', '송파구'];
}

type Address = [number, string, string];

function getArrayTwo(): Address{
    return[ 14023, '서울시', '송파구'];
}

// 특정한 위치를 가지고 왔을 때 타이핑 할 수 없음
// 어떤 데이터가 올지 모르니까.
let address2 = getArrayTwo()[2];

// 숫자를 넣을 때 타입 체크가 가능하다.
address2 = 12;

