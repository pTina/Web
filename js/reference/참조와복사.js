/*
2022-03-12

참조와 복사
: 값을 변수로 할당할 때 변수와 변수 사에 그  값이 이동하는 매커니즘과 관련된 캐머니즘

[복사]
기본형 데이터 타입은 모두 값이 복사가 된다.
어떤 상황에서도 이전 변ㄴ수에 담겨있는 값에 영향을 주지 않는다.

[참조]
기본형을 제외한 나머지값 즉, 객체
객체는 복사되는 것이 아니고 참조된다고 한다.
객체형 타입은 그 객체 자체가 들어가는 것이 아니라
객체는 한 곳에 저장되어 있고, 그 저장되어 있는 위치 값만 변수에 기록된다.

아무리 많은 변수에 그 객체의 위치 값을 넘겨준다 하더라도 절대 변하지 않는다.
결구 객체는 유니크하고 한 번 만들어지고 나서는 대입문을 통해 복사되지 않는다.
언제나 하나만 존재한다.

[중요한 이유]
객체 타입인 경우
의도하지 않은 참조값의 변경으로 인해 버그가 발생할 수 있다.
이를 잘 인지하고 있어야 복잡한 패턴의 코드에서도 문제가 발생하지 않고
안전한 코드를 작성할 수 있다.

*/

// a, b에는 모두 10이 들어감
// 그렇다면 10은 어떻게 이동되어 있는가?
let a = 10;

// a에 있는 10이라는 값이 b에 복사된다. => '복사' 매커니즘
// a에 들어있는 10과는 관계가 없다.
let b = a;

// b만 20으로 바뀜
// a에 들어 있는 것에는 영향을 미치지 않는다.
b = 20; 

let o = {
    isLoading: false,
}

// o의 객체가 저장되어있는 주소값(위치값)이 저장됨
// 결국 o, o2 모두 같은 것을 가리키고 있음
// let o2 = o;

// o.isLoading, o2.isLoading 모두 true로 변경된다.
// o2가 가리키고 있는 객체의 속성 isLoading을 true로 바꿔라.
// o2.isLoading = true;

function foo(o){
    o.isLoading = true;
}

// 함수가 호출되는 과정에도 객체인 경우 참조가 일어나기 때문에
// o.isLoading은 true로 변경된다.
foo(o);


