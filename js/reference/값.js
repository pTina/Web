
// 2022-03-09
// 값

// *자바스크립트*
// [기본 자료형]
// 자바스크립트 내에서 코드가 아닌 데이터로서의 규격이 어떤 것들이 있는가
// Boolean - true, false
// Null - 값이 없다
// Undefined - 값이 정의되어 있지 않다. (JS에만 있는 타입)
// Number - 자바스크립트 내에서는 숫자, 정수를 Number로 취급한다.
// String - 문자열
// Symbol - ES6에 추가된 새로운 타입
// 별도의 Object도 있음
//      위의 타입 외의 거의 모든 데이터 타입이 Object라고 보면 된다.
//      자바스크립트에서는 웬만하면 모두 값으로 취급한다.
//      배열, 함수도 값으로 취급한다.

// 자바스크립트, 타입스크립트에서는 값으로 취급하는 범위가 매우 넓다.

// 배열: 여러 개의 값을 순서대로 담는 자료 구조형
// 그냥 넣고 빼고 할 수 있음

// *타입스크립트*
// 자바스크립트에서 제공하는 것보다 훨씬 확장된 데이터 타입을 지원한다.
// -Tuple
// 배열을 조금 확장해서 독특한 기능을 제공한다.
// 값의 유형, 타입 제약을 걸 수 있다.
// 배열 내의 원소 타입을 제한하고 싶을 때 사용하면 편리함
// 
// -Enum
// 열거
// 타입스크립트만 지원하고 있음
// 시작값은 0, 시작값을 바꿀 수 있다.

// 선호하지 않는다.
// 데이터가 아닌 코드이기 때문에 외부로부터 어떤 데이터를 가지고 오고
// 그 데이터를 객체로 표현해서 UI에서 다루게 될 때
// enum으로 변환시키기 까다롭다.
// 실제로 주고받는 용도의 데이터일 수 있는지 잘 판단해야 함

// 자바스크립트
const Color = {
    Red: 1,
    Blue: 2,
    Green: 3,
}

Color.Red;

// 타입스크립트 
// enum Color{
//     Red, Blue, Green
// }
// Color.Red;

// -Any
// 타입스크립트에만 존재한다.
// 모든 데이터 타입, 어떤 값도 데이터 타입으로 들어갈 수 있다. 
// 타입스크립트가 자바스크립트 개발자에게 
// 타입스크립트로의 전환을 점진적으로 안전하게 할 수 있게 하기 위한 타입
// 자바스크립트와 똑같이 작동한다고 했을 때 내부적인 논리적 근거가 필요한데 그 때 반드시 필요한 존재
// 가능하면 쓰지 않고 지양하는 것을 권고한다.
// 
// -Void
// 함수가 리턴값이 없는 경우에 타입을 명시할 때 사용
// 
// -Never
// 절대 발생할 수 없는 타입
// 특수한 용도의 타입
// 항상 오류를 발생시키거나 절대 반환하지 않는 반환 타입으로 사용됨
// 
// -객체 
// 기본값 유형을 제외하고는 거의 모든 게 객체로 제공된다.
// 혹은 객체로 만들어져 있다.
// (=> 자바스크립트 코드의 거의 대부분이 값으로 이루어져 있다.)
// 객체도 값으로 취급한다.
// 

// 제 1원칙
// **언어 레벨에서 값으로 취급하는 것은 무엇이든 변수에 넣을 수 있다**
// 값을 데이터보다 훨씬 더 확장해둠
// ex. object도 값인데 object 안에는 데이터도 있지만 코드(메소드)도 들어가 있다.
// 코드의 묶음도 값으로 취급한다. 변수에 넣을 수 있다.
// -> 이것을 가지고 할 수 있는 프로그래밍 테크닉이 매우 많다. 
// ex. 콜백 함수
// 
//  
// 
// 
// 
// 
// 
// 
// 
// 
//
//
//
// 
//
//
//
//
//
//
//
//
//
//
//



