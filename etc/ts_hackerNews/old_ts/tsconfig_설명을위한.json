{
    "compilerOptions": {
      "strict": true,
      "target": "ES5",
      "module": "CommonJS",
      "alwaysStrict": true,
      "noImplicitAny": true,
      "noImplicitThis": true,
      "sourceMap": true,
      "downlevelIteration": true,
      "lib": [
        "es2015",
        "dom"
      ]
    } 
  }

// TS: 타입 확장 구문을 제공한다
// JS: 타입이 있지만 문법적으로 기술X
//      상황적으로 어떤 데이터 타입인지 자동 변환되는 느슨한 타입 체계

// => TS로 변환하겠다고 했을 때 JS는 타입이 아무것도 정해져 있지 않음
// => 변환되어야 하는 JS 파일 규모가 크면 수정도 많음

// 옵션: strict
// 타입 스크립트의 기능을 얼마나 엄격하게 적용시켜 변환시킬 것인가?
// 옵션값
// false(default) => 소프트 랜딩(보통 JS 파일에서도 오류없이 동작 가능)
// true => 본격적으로 TS로 변환하려고 할 때, TS 제공 정보가 많아 손쉽게 수정 가능

// 옵션: noImplicitAny
// Any타입을 쓰지 않을 것이다.
// (Any: JS에 타이핑이 되어있지 않은 알 수 없는 타입)
// false(default) => Any 타입 사용하겠다.
// true => Any 타입 사용하지 않겠다, 명확하게 어떤 타입인지 기술해야 함

// 옵션: target
// TS --컴파일--> JS
// JS에서 사용할 문법 체계, JS 버전 몇의 문법 체계를 사용할 것인지?
// 타킷 브라우저에 따라 설정

// 옵션: module
// 모듈과 관련된 내용

// 옵션: sourceMap
// 개발 환경과 실행 환경 일치 시킬 수 있는 설정
// 작성: TS(브라우저가 모르는 언어), 실제 실행: JS
// => 코드 문제 발생? 변환된 JS 파일로 문제 발견 어려움
// 그래서 실제 브라우저에서 우리가 작성했던 원본 코드(TS코드)를 보여주면서
// 문제점을 찾을 수 있도록 연결 정보를 갖고 있는 파일
// 옵션값
// ture: sourceMap파일을 사용할 것이니 생성해줘.

// dist
// TS파일을 컴파일하면 생성되는 디럭터리
// TS 컴파일러가 타입스크립트 파일을 변환한 결과를 출력해 놓은 타겟 디럭터리
// 하위 파일에 .map 파일 => sourceMap파일





  